#   Modifiers through environment variables in TravisCI
#
#   For pushing the image to DockerHub add:
#     DOCKER_REPO=your-username/your-repo (by default the Git Repo Slug is assigned. e.g. bigbluebutton/bbb-app-rooms)
#     DOCKER_USERNAME=your-username
#     DOCKER_PASSWORD=your-password
#
#   For bypassing tests add:
#     IGNORE_TEST=true
#
#   For building docker images for all branches add:
#     BUILD_ALL=true (by default only docker images for tags and master branch are built)

sudo: required
language: ruby
rvm:
  - 2.7.1
cache:
  bundler: true
  directories:
    - tmp/cache/assets/test/sprockets
services:
  - postgresql
  - docker
env:
  global:
  - COMMIT_SHORT_SHA=${TRAVIS_COMMIT::8}
  - BUILD_NUMBER="${TRAVIS_TAG:-${TRAVIS_BRANCH}-${COMMIT_SHORT_SHA}}"
  - DOCKER_REPO="${DOCKER_REPO:-${TRAVIS_REPO_SLUG}}"
jobs:
  include:
  - stage: test
    name: rubocop
    script:
      - bundle exec rubocop
    if: env(TEST_IGNORE) IS NOT present
  - stage: test
    name: rspec
    before_script:
      - bundle exec rake db:create
      - bundle exec rake db:migrate
      - bundle install
    script:
      - bundle exec rspec
    if: env(TEST_IGNORE) IS NOT present
# This build is only triggered when building from a branch.
  - stage: build
    name: build branch
    script:
      - docker build -t $DOCKER_REPO:$TRAVIS_BRANCH --build-arg BUILD_NUMBER="$TRAVIS_BRANCH ($(expr substr $TRAVIS_COMMIT 1 7))" .
    after_success:
      - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD docker.io
      - docker push $DOCKER_REPO
    if: type = push AND env(BUILD_IGNORE) IS NOT present AND (branch = master OR tag IS blank AND env(BUILD_ALL) IS present)
# This build is only triggered when building from a tag.
  - stage: build
    name: build release
    script:
      - docker build -t $DOCKER_REPO:$TRAVIS_TAG --build-arg BUILD_NUMBER=$TRAVIS_TAG .
    after_success:
      - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD docker.io
      - docker tag $DOCKER_REPO:$TRAVIS_TAG $DOCKER_REPO:latest
      - docker push $DOCKER_REPO
    if: env(BUILD_IGNORE) IS NOT present AND tag IS NOT blank
# This deployment is only triggered when building from a branch.
  - stage: deploy
    name: deploy branch to k8s
    env:
      - CHANGE_MINIKUBE_NONE_USER=true
    before_script:
      - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.17.0/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
      - curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
      - sudo minikube start --vm-driver=none --kubernetes-version=v1.17.0
      - minikube update-context
    script:
      - kubectl --insecure-skip-tls-verify --kubeconfig="/dev/null" --server=$KUBERNETES_BRANCH_SERVER --token=$KUBERNETES_TOKEN get deployment $KUBERNETES_DEPLOYMENT -o json > deployment.json
      # Update the deployment.yaml file with $DOCKER_REPO:$TRAVIS_BRANCH.
      - ruby scripts/ci_k8s_deployment_update.rb $DOCKER_REPO:$TRAVIS_BRANCH deployment.json
      - kubectl --insecure-skip-tls-verify --kubeconfig="/dev/null" --server=$KUBERNETES_BRANCH_SERVER --token=$KUBERNETES_TOKEN apply -f deployment.json
    if: type = push AND env(DEPLOY_IGNORE) IS NOT present AND (branch = master OR tag IS blank AND env(DEPLOY_ALL) IS present)
# This deployment is only triggered when building from a branch.
  - stage: deploy
    name: deploy release to k8s
    env:
      - CHANGE_MINIKUBE_NONE_USER=true
    before_script:
      - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.17.0/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
      - curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
      - sudo minikube start --vm-driver=none --kubernetes-version=v1.17.0
      - minikube update-context
    script:
      - kubectl --insecure-skip-tls-verify --kubeconfig="/dev/null" --server=$KUBERNETES_RELEASE_SERVER --token=$KUBERNETES_TOKEN get deployment $KUBERNETES_DEPLOYMENT -o json > deployment.json
      # Update the deployment.yaml file with $DOCKER_REPO:$TRAVIS_TAG.
      - ruby scripts/ci_k8s_deployment_update.rb $DOCKER_REPO:$TRAVIS_TAG deployment.json
      - kubectl --insecure-skip-tls-verify --kubeconfig="/dev/null" --server=$KUBERNETES_RELEASE_SERVER --token=$KUBERNETES_TOKEN apply -f deployment.json
    if: env(DEPLOY_IGNORE) IS NOT present AND tag IS NOT blank
